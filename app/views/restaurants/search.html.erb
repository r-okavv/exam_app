<div class="container mx-auto px-4">
  <%= form_with url: search_restaurants_path, method: :get, local: true, id: 'address-form' do |f| %>
    <div class="mb-6 mt-6">
      <button type="button" id="get-location" class="btn">現在地を取得</button>
      <p>※現在地取得ボタンが反応しない場合はお手数ですがReloadしてから再度クリックをお願いします...</p>
    </div>
    <div class="mb-6">
      <%= f.label :address, '住所' %>
      <%= f.text_field :address, id: 'address', value: params[:address], class:"input input-bordered" %>
      <%= f.hidden_field :latitude, id: 'latitude' %>
      <%= f.hidden_field :longitude, id: 'longitude' %>
    </div>
    <div class="mb-6">
      <%= f.label :radius, '検索範囲（メートル）' %>
      <%= f.number_field :radius, value: params[:radius]|| 50, min: 10, step: 10 %>
    </div>
    <div class="mb-6">
      <%= f.label :place_type, 'Bar'%>
      <%= f.radio_button :place_type, 'bar'  %>
      <%= f.label :place_type, 'Restaurant' %>
      <%= f.radio_button :place_type, 'restaurant' %>
    </div>

      <div class="mb-6">
      <%= f.label :rating, "クチコミスコア" %>
      <%= f.select :rating, [["選択しない", nil], ["1以上", 1], ["2以上", 2], ["3以上", 3], ["4以上", 4], ["5", 5]], selected: params[:rating], include_blank: false %>
    </div>
    <%# <div class="mb-6"> %>
      <%# <%= f.label :closing_time, '閉店時間' %>
      <%# <%= f.range_field :closing_time, value: 22, min: 0, max: 24, step: 1 %>
    <%# </div> %>
    <div class="mb-6">
      <%= f.submit '検索', id: 'search-address',class:'btn' %>
    </div>
  <% end %>

  <% if @restaurants.present? %>
  <div class="flex justify-between items-center mb-6">
    <p class="text-lg">検索結果</p>
    <div>
      <label for="sort-options" class="mr-2">並べ替え:</label>
      <select id="sort-options" class="input input-bordered">
        <option value="default">デフォルト</option>
        <option value="rating">Rating降順</option>
        <option value="bookmarks">ブックマーク数降順</option>
      </select>
    </div>
  </div>
  <div class="container mx-auto", id="restaurant-list">
    <%= render @restaurants %>
  </div>
<% end %>
<%# </div> %>


<script>
document.addEventListener('turbo:load', function() {
  const getLocationButton = document.getElementById('get-location');
  const searchButton = document.getElementById('search-address');

  getLocationButton.addEventListener('click', function() {
    if (!navigator.geolocation) {
      alert('Geolocation is not supported by your browser');
      return;
    }

    searchButton.disabled = true; // 住所が取得できるまでボタンを無効化する

    function success(position) {
      const latitude  = position.coords.latitude;
      const longitude = position.coords.longitude;

      // サーバーに緯度と経度を送信
      fetch('/get_location', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector("meta[name='csrf-token']").getAttribute("content")
        },
        body: JSON.stringify({latitude: latitude, longitude: longitude}),
      })
      .then(response => response.json())
      .then(data => {
        // レスポンスから住所を取得し、フォームにセット
        const addressInput = document.querySelector('input[name="address"]');
        addressInput.value = data.address;

        // hidden fieldに緯度と経度をセット
        document.getElementById('latitude').value = latitude;
        document.getElementById('longitude').value = longitude;

        searchButton.disabled = false; // ボタンを有効化
      });
    }

    function error() {
      alert('Unable to retrieve your location');
    }

    navigator.geolocation.getCurrentPosition(success, error);
  });
});

document.getElementById('sort-options').addEventListener('change', function() {
  const sortBy = this.value;
  const restaurantList = document.getElementById('restaurant-list');
  const restaurants = Array.from(restaurantList.querySelectorAll('[data-restaurant-container]'));

  let sortedRestaurants;

  switch (sortBy) {
    case 'rating':
      sortedRestaurants = restaurants.sort((a, b) => {
      const aCard = a.querySelector('.card');
      const bCard = b.querySelector('.card');
      const aValue = parseFloat(aCard.getAttribute('data-rating'));
      const bValue = parseFloat(bCard.getAttribute('data-rating'));
      return bValue - aValue; // 降順
    });
  break;
    case 'bookmarks':
      sortedRestaurants = restaurants.sort((a, b) => {
      const aCard = a.querySelector('.card');
      const bCard = b.querySelector('.card');
      const aValue = parseFloat(aCard.getAttribute('data-bookmarks'));
      const bValue = parseFloat(bCard.getAttribute('data-bookmarks'));
      return bValue - aValue; // 降順
    });
  break;

    default:
      sortedRestaurants = restaurants;
    }

  sortedRestaurants.forEach(restaurant => {
    restaurantList.appendChild(restaurant);
  });
});


</script>
</div>